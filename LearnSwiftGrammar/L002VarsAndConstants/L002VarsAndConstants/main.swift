//
//  main.swift
//  L002VarsAndConstants
//
//  Created by 王迎博 on 16/8/3.
//  Copyright © 2016年 王迎博. All rights reserved.
//

import Foundation

var a = 1
a = 10
var b = 2
let c = a + b
print(c)


//变量命名
var _var = "Hello, Swift!"
print(_var)
var 你好 = "你好世界"
var 菜鸟教程 = "www.runoob.com"
print(你好)
print(菜鸟教程)


//常量
/**
 *  常量一旦设定，在程序运行时就无法改变其值。
 *  常量可以是任何的数据类型如：整型常量，浮点型常量，字符常量或字符串常量。同样也有枚举类型的常量：
 *  常量类似于变量，区别在于常量的值一旦设定就不能改变，而变量的值可以随意更改
 */
let constA = 42
print(constA)
//当你声明常量或者变量的时候可以加上类型标注（type annotation），说明常量或者变量中要存储的值的类型。如果要添加类型标注，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称
let constB:Float = 3.14159
print(constB)
//常量命名
let _const = "Hello, Swift!"
print(_const)
let ni = "你好世界"
print(ni)


//字面量-所谓字面量，就是指像特定的数字，字符串或者是布尔值这样，能够直接了当地指出自己的类型并为变量进行赋值的值
let aNumber = 3         //整型字面量
let aString = "Hello"   //字符串字面量
let aBool = true        //布尔值字面量
/**
 浮点型字面量有整数部分，小数点，小数部分及指数部分。
 除非特别指定，浮点型字面量的默认推导类型为 Swift 标准库类型中的 Double，表示64位浮点数。
 浮点型字面量默认用十进制表示（无前缀），也可以用十六进制表示（加前缀 0x）。
 十进制浮点型字面量由十进制数字串后跟小数部分或指数部分（或两者皆有）组成。十进制小数部分由小数点 . 后跟十进制数字串组成。指数部分由大写或小写字母 e 为前缀后跟十进制数字串组成，这串数字表示 e 之前的数量乘以 10 的几次方。例如：1.25e2 表示 1.25 ⨉ 10^2，也就是 125.0；同样，1.25e－2 表示 1.25 ⨉ 10^－2，也就是 0.0125。
 十六进制浮点型字面量由前缀 0x 后跟可选的十六进制小数部分以及十六进制指数部分组成。十六进制小数部分由小数点后跟十六进制数字串组成。指数部分由大写或小写字母 p 为前缀后跟十进制数字串组成，这串数字表示 p 之前的数量乘以 2 的几次方。例如：0xFp2 表示 15 ⨉ 2^2，也就是 60；同样，0xFp-2 表示 15 ⨉ 2^-2，也就是 3.75。
 负的浮点型字面量由一元运算符减号 - 和浮点型字面量组成，例如 -42.5。
 */
let decimalDouble = 12.1875       //十进制浮点型字面量
let exponentDouble = 1.21875e1    //十进制浮点型字面量
let hexadecimalDouble = 0xC.3p0   //十六进制浮点型字面量
//字符串型字面量
let stringL = "Hello\tWorld\n\n菜鸟教程官网：\'http://www.runoob.com\'"
print(stringL)


//赋值运算
/**
 =	简单的赋值运算，指定右边操作数赋值给左边的操作数。	C = A + B 将 A + B 的运算结果赋值给 C
 +=	相加后再赋值，将左右两边的操作数相加后再赋值给左边的操作数。	C += A 相当于 C = C + A
 -=	相减后再赋值，将左右两边的操作数相减后再赋值给左边的操作数。	C -= A 相当于 C = C - A
 *=	相乘后再赋值，将左右两边的操作数相乘后再赋值给左边的操作数。	C *= A 相当于 C = C * A
 /=	相除后再赋值，将左右两边的操作数相除后再赋值给左边的操作数。	C /= A 相当于 C = C / A
 %=	求余后再赋值，将左右两边的操作数求余后再赋值给左边的操作数。	C %= A is equivalent to C = C % A
 <<=	按位左移后再赋值	C <<= 2 相当于 C = C << 2
 >>=	按位右移后再赋值	C >>= 2 相当于 C = C >> 2
 &=	按位与运算后赋值	C &= 2 相当于 C = C & 2
 ^=	按位异或运算符后再赋值	C ^= 2 相当于 C = C ^ 2
 |=	按位或运算后再赋值	C |= 2 相当于 C = C | 2
 */
var A = 10
var B = 20
var C = 100

C = A + B
print("C 结果为：\(C)")
C += A
print("C 结果为：\(C)")
C -= A
print("C 结果为：\(C)")
C *= A
print("C 结果为：\(C)")
C /= A
print("C 结果为：\(C)")

//以下测试已注释，可去掉注释测试每个实例
/*
     C %= A
     print("C 结果为：\(C)")
     
     C <<= A
     print("C 结果为：\(C)")
     
     C >>= A
     print("C 结果为：\(C)")
     
     C &= A
     print("C 结果为：\(C)")
     
     C ^= A
     print("C 结果为：\(C)")
     
     C |= A
     print("C 结果为：\(C)")
 */