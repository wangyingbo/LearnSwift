//
//  YBButton.swift
//  testDelegate
//
//  Created by 王迎博 on 16/11/8.
//  Copyright © 2016年 王迎博. All rights reserved.
//

import UIKit

/**
 1 调用相关
 指定构造器必须调用它直接父类的指定构造器方法.
 便利构造器必须调用同一个类中定义的其它初始化方法.
 便利构造器在最后必须调用一个指定构造器.
 2 属性相关
 指定构造器必须要确保所有被类中提到的属性在代理向上调用父类的指定构造器前被初始化, 之后才能将其它构造任务代理给父类中的构造器.
 指定构造器必须先向上代理调用父类中的构造器, 然后才能为任意属性赋值.
 便利构造器必须先代理调用同一个类中的其他构造器, 然后再为属性赋值.
 构造器在第一阶段构造完成之前, 不能调用任何实例方法, 不能读取任何实例属性的值，self 不能被引用.
 3 继承相关
 如果子类没有定义任何的指定构造器, 那么会默认继承所有来自父类的指定构造器.
 如果子类提供了所有父类指定构造器的实现, 不管是通过上一条规则继承过来的, 还是通过自定义实现的, 它将自动继承所有父类的便利构造器.
 
 */



/**
 参考文档：http://www.jianshu.com/p/2c3db48101da
 参考文档：http://draveness.me/swift-zhong-init-de-shi-yong/
 定义Swift初始化方法，必须遵循三条规则：
 1.指定构造器必须调用它直接父类的指定构造器方法
 2.便利构造器必须调用同一类中定义的其他初始化方法
 3.便利构造器在最后必须调用一个指定构造器。
 */



/**
 1 指定构造器必须要确保所有被类中提到的属性在代理向上调用父类的指定构造器前被初始化, 之后才能将其它构造任务代理给父类中的构造器.
 2 指定构造器必须先向上代理调用父类中的构造器, 然后才能为任意属性赋值.
 3 便利构造器必须先代理调用同一个类中的其他构造器, 然后再为属性赋值.
 4 构造器在第一阶段构造完成之前, 不能调用任何实例方法, 不能读取任何实例属性的值，self 不能被引用
 */



/**
 一 阶段
 1 某个指定构造器或便利构造器被调用.
 2 完成新的实例内存的分配, 但此时内存还没有被初始化.
 3 指定构造器确保其所在类引入的所有存储型属性都已赋值. 存储型属性所属的内存完成初始化.
 4 指定构造器将调用父类的构造器, 完成父类属性的初始化.
 5 这个调用父类构造器的过程沿着构造器链一直往上执行, 直到到达构造器链的最顶部.
 6 当到达了构造器链最顶部, 且已确保所有实例包含的存储型属性都已经赋值，这个实例的内存被认为已经完全初始化。此时 阶段 1 完成.
 7 子类的便利构造器首先会被调用, 这时便利构造器无法修改子类的任何属性.
 8 便利构造器会调用子类中的指定构造器, 指定构造器(子类)要确保所有的属性都已赋值, 完成所属内存的初始化,
 9 接着会指定构造器(子类)会调用父类中的指定构造器, 完成父类属性所属内存的初始化, 直到达到构造器链的最顶部. 所有的属性以及内存被完全初始化, 然后进入第 阶段 2.
 二 阶段
 1 从顶部构造器链一直向下, 每个构造器链中类的指定构造器都有机会进一步定制实例. 构造器此时可以访问 self, 修改它的属性并调用实例方法等等。
 2 最终, 任意构造器链中的便利构造器可以有机会定制实例和使用 self
 3 父类中的指定构造器定制实例的属性(可能).
 4 子类中的指定构造器定制实例的属性.
 5 子类中的便利构造器定制实例的属性.
 */

class YBButton: UIButton {
    
    var name:String = ""
    var myBackgroundColor: UIColor = UIColor.blackColor() {
        didSet {
            self.backgroundColor = myBackgroundColor
        }
    }
    
    //自定义指定构造器，必须调用父类的某一个指定构造器
    init(frame: CGRect, name: String, testStr: String) {
        super.init(frame: frame)
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    //自定义便利构造器，必须调用自己的指定构造器
    convenience init(myConStr: String?) {
        let rect:CGRect = CGRectMake(0, 0, 100, 100)
        self.init(frame:rect, name: "wyb", testStr: "testStr")
    }
    
    //自定义便利构造器，调用自己的便利构造器方法。（最后还是要调用指定便利器构造方法）（指定或便利都可以））
    //属性必须在调用父类构造器之前已被初始化
    convenience init(max:Int){
        let rect:CGRect = CGRectMake(0, 0, 100, 100)
        self.init(frame:rect,name: "wyb",testStr: "testStr")
        
        //和上面的都可以
        //self.init(myConStr:"哈哈")
    }
    
    
    // 重写父类的构造方法
    //    override init(frame: CGRect) {
    //        super.init(frame: frame)
    //    }

}
